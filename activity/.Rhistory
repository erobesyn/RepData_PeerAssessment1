MY RMD FILE FOR PA1
========================================================
# A Loading and preprocessing the data
## 1 Load and inspect the data
```{r}
setwd("D:/PA1")
dir()
act<-read.csv("activity.csv")
head(act)
tail(act)
class(act)
str(act)
```
## 2 Process/transform the data
Turn dates into date class.
```{r}
str(act)
act$date<-as.Date(act$date)
```
Reorder the columns.
```{r}
act<-act[, c(2,3,1)]
head(act)
```
Create wide dataset for the analysis per 5-min interval (gcook p367)
```{r}
install.packages("reshape2")
library("reshape2", lib.loc="C:/Users/erobesyn/Documents/R/win-library/3.0")
```
```{r, results="hide"}
actwide<-dcast(act, act$date~act$interval, value.var="steps")
str(actwide)
```
Actwide is dataframe of 61 rows (days) and 288 other columns (5-min intervals in one day)
[Convert dataframe in 2-col df with one for date with fractional values (gcook p 370)
(cave I do not have time series object yet)
zoo package to convert to time series object ?? ]
# B What is mean total number of steps taken per day?
## 1 Make histogram of total number of steps per day
1. First, we create a new variable, called "stepsbyday", to store the total number of steps per day.
```{r}
stepsbyday<-tapply(act$steps, act$date, sum)
head(cbind(stepsbyday))
```
2. Then, we make the histogram of this new variable.
```{r,fig.width=7,fig.height=4}
max<-max(stepsbyday[is.na(stepsbyday)=="FALSE"])
max
hist(stepsbyday, col="red", main="Histogram of steps per day", ylab="Frequency", xlab="Number of steps per day", breaks=20, xlim=c(0,max+3000))
```
## 2 Calculate mean and median total number of steps per day
```{r}
meanbyday<-mean(stepsbyday,na.rm=T)
medianbyday<-median(stepsbyday, na.rm=T)
```
The mean total number per day is `r meanbyday` and the median total number per day is `r medianbyday`.
They are only 1 step per day different from each other, indicating hardly any skew in the data.
Note: For some reason the correct mean and median calculated by the 5-number summary differs very slightly from the command summary(stepsbyday). Summary() finds the maximum value at 21190 while the real maximum value is 21194.  (rounding effect?)
[Store MEAN total steps per day and make ts of this var]  ??? NOT NEEDED ???
# C What is the average daily activity pattern?
plot(act$date, act$steps, type="l")
## 1 Make time series plot with average number of steps per 5-min interval, averaged across all days
Do the same as above but with MEAN per 5-min interval
```{r}
stepsperinterval<-colSums(actwide[,-1],na.rm=T)
head(stepsperinterval)
tail(stepsperinterval)
```
First sum over all 61 days, then divide by 61 to get average.
```{r, fig.width=7, fig.height=4}
max(stepsperinterval)
max(stepsperinterval)/61
plot(stepsperinterval/61, type="l", main="Average number (across all days) of steps per 5-min interval", ylab="Number of steps", xlab="5-min intervals in a day", col="red")
```
## 2 Which 5-min interval, averaged across all days, contains most steps?
10927 steps in 5 min - to divide by 61 days? =179 steps per 5 min
```{r,results="hide"}
stepsperinterval<-as.data.frame(stepsperinterval)
stepsperinterval/61
```
```{r}
str(stepsperinterval/61)
```
There are 288 5-min intervals in a day
Look for interval with 179.13 steps
Answer: interval 835! (cumulative nr of 5-min intervals)
WRONG because we are looking at averages across days...
# D Imputing missing values
## 1 Calculate total number of rows with NAs
```{r NA}
rows<-nrow(act)
narows<-sum(is.na(act))
```
From the `r rows` in the dataset, `r narows` contain one or more missing values.
## 2 Devise strategy for filling missing values (e.g. mean for day, mean for 5-min interval, ...)
## 3 Create new dataset with missing data filled in.
## 4 Make histogram with total nr of steps per day. Calculate mean and median total steps per day. Do they differ from part B (without imputing missing values). What is impact of imputing missing data on the estimates?
# E Are there differences in activity patterns between weekdays and weekends?
## 1 Create factor 'part of week' (weekday or weekend)
## 2 Make panel plot of time series with average number of steps per 5-min interval, averaged across all weekdays OR weekenddays.
See gcook p354. ddply with transform
Then ggplot2 with gcook p370
Or zoo rcook
```{r}
library(zoo)
datets<-zoo(act,act$date)
str(datets)
head(datets)
```
MY RMD FILE FOR PA1
========================================================
# A Loading and preprocessing the data
## 1 Load and inspect the data
```{r}
setwd("D:/PA1")
dir()
act<-read.csv("activity.csv")
setwd("C:\Users\Robesyn\RepData_PeerAssessment1\activity")
dir()
act<-read.csv("activity.csv")
setwd("C:\Users\Robesyn\RepData_PeerAssessment1\activity\")
dir()
act<-read.csv("activity.csv")
setwd("C:/Users/Robesyn/RepData_PeerAssessment1/activity")
dir()
act<-read.csv("activity.csv")
head(act)
tail(act)
class(act)
str(act)
```
## 2 Process/transform the data
Turn dates into date class.
```{r}
str(act)
act$date<-as.Date(act$date)
```
Reorder the columns.
```{r}
act<-act[, c(2,3,1)]
head(act)
```
Create wide dataset for the analysis per 5-min interval (gcook p367)
```{r}
install.packages("reshape2")
library("reshape2", lib.loc="C:/Users/erobesyn/Documents/R/win-library/3.0")
```
```{r, results="hide"}
actwide<-dcast(act, act$date~act$interval, value.var="steps")
MY RMD FILE FOR PA1
========================================================
# A Loading and preprocessing the data
## 1 Load and inspect the data
```{r}
setwd("C:/Users/Robesyn/RepData_PeerAssessment1/activity")
dir()
act<-read.csv("activity.csv")
head(act)
tail(act)
class(act)
str(act)
```
## 2 Process/transform the data
Turn dates into date class.
```{r}
str(act)
act$date<-as.Date(act$date)
```
Reorder the columns.
```{r}
act<-act[, c(2,3,1)]
head(act)
```
Create wide dataset for the analysis per 5-min interval (gcook p367)
```{r}
install.packages("reshape2")
library("reshape2", lib.loc="C:/Users/erobesyn/Documents/R/win-library/3.0")
```
```{r, results="hide"}
actwide<-dcast(act, act$date~act$interval, value.var="steps")
str(actwide)
```
Actwide is dataframe of 61 rows (days) and 288 other columns (5-min intervals in one day)
[Convert dataframe in 2-col df with one for date with fractional values (gcook p 370)
(cave I do not have time series object yet)
zoo package to convert to time series object ?? ]
# B What is mean total number of steps taken per day?
## 1 Make histogram of total number of steps per day
1. First, we create a new variable, called "stepsbyday", to store the total number of steps per day.
```{r}
stepsbyday<-tapply(act$steps, act$date, sum)
head(cbind(stepsbyday))
```
2. Then, we make the histogram of this new variable.
```{r,fig.width=7,fig.height=4}
max<-max(stepsbyday[is.na(stepsbyday)=="FALSE"])
max
hist(stepsbyday, col="red", main="Histogram of steps per day", ylab="Frequency", xlab="Number of steps per day", breaks=20, xlim=c(0,max+3000))
```
## 2 Calculate mean and median total number of steps per day
```{r}
meanbyday<-mean(stepsbyday,na.rm=T)
medianbyday<-median(stepsbyday, na.rm=T)
```
The mean total number per day is `r meanbyday` and the median total number per day is `r medianbyday`.
They are only 1 step per day different from each other, indicating hardly any skew in the data.
Note: For some reason the correct mean and median calculated by the 5-number summary differs very slightly from the command summary(stepsbyday). Summary() finds the maximum value at 21190 while the real maximum value is 21194.  (rounding effect?)
[Store MEAN total steps per day and make ts of this var]  ??? NOT NEEDED ???
# C What is the average daily activity pattern?
plot(act$date, act$steps, type="l")
## 1 Make time series plot with average number of steps per 5-min interval, averaged across all days
Do the same as above but with MEAN per 5-min interval
```{r}
stepsperinterval<-colSums(actwide[,-1],na.rm=T)
head(stepsperinterval)
tail(stepsperinterval)
```
First sum over all 61 days, then divide by 61 to get average.
```{r, fig.width=7, fig.height=4}
max(stepsperinterval)
max(stepsperinterval)/61
plot(stepsperinterval/61, type="l", main="Average number (across all days) of steps per 5-min interval", ylab="Number of steps", xlab="5-min intervals in a day", col="red")
```
## 2 Which 5-min interval, averaged across all days, contains most steps?
10927 steps in 5 min - to divide by 61 days? =179 steps per 5 min
```{r,results="hide"}
stepsperinterval<-as.data.frame(stepsperinterval)
stepsperinterval/61
```
```{r}
str(stepsperinterval/61)
```
There are 288 5-min intervals in a day
Look for interval with 179.13 steps
Answer: interval 835! (cumulative nr of 5-min intervals)
WRONG because we are looking at averages across days...
# D Imputing missing values
## 1 Calculate total number of rows with NAs
```{r NA}
rows<-nrow(act)
narows<-sum(is.na(act))
```
From the `r rows` in the dataset, `r narows` contain one or more missing values.
## 2 Devise strategy for filling missing values (e.g. mean for day, mean for 5-min interval, ...)
## 3 Create new dataset with missing data filled in.
## 4 Make histogram with total nr of steps per day. Calculate mean and median total steps per day. Do they differ from part B (without imputing missing values). What is impact of imputing missing data on the estimates?
# E Are there differences in activity patterns between weekdays and weekends?
## 1 Create factor 'part of week' (weekday or weekend)
## 2 Make panel plot of time series with average number of steps per 5-min interval, averaged across all weekdays OR weekenddays.
See gcook p354. ddply with transform
Then ggplot2 with gcook p370
Or zoo rcook
```{r}
library(zoo)
datets<-zoo(act,act$date)
str(datets)
head(datets)
```
install.packages("reshape2")
setwd("C:/Users/Robesyn/RepData_PeerAssessment1/activity")
dir()
act<-read.csv("activity.csv")
head(act)
tail(act)
class(act)
str(act)
```
## 2 Process/transform the data
```{r}
str(act)
act$date<-as.Date(act$date)
```
Reorder the columns.
```{r}
act<-act[, c(2,3,1)]
head(act)
```
Create wide dataset for the analysis per 5-min interval (gcook p367)
```{r}
install.packages("reshape2")
library("reshape2", lib.loc="C:/Users/erobesyn/Documents/R/win-library/3.0")
install.packages("reshape2")
install.packages("reshape2")
library("reshape2", lib.loc="C:/Users/Robesyn/Documents/R/win-library/3.0")
MY RMD FILE FOR PA1
========================================================
# A Loading and preprocessing the data
## 1 Load and inspect the data
```{r}
setwd("C:/Users/Robesyn/RepData_PeerAssessment1/activity")
dir()
act<-read.csv("activity.csv")
head(act)
tail(act)
class(act)
str(act)
```
## 2 Process/transform the data
Turn dates into date class.
```{r}
str(act)
act$date<-as.Date(act$date)
```
Reorder the columns.
```{r}
act<-act[, c(2,3,1)]
head(act)
```
Create wide dataset for the analysis per 5-min interval (gcook p367)
```{r}
install.packages("reshape2")
install.packages("reshape2")
library("reshape2", lib.loc="C:/Users/Robesyn/Documents/R/win-library/3.0")
```
```{r, results="hide"}
actwide<-dcast(act, act$date~act$interval, value.var="steps")
str(actwide)
```
Actwide is dataframe of 61 rows (days) and 288 other columns (5-min intervals in one day)
[Convert dataframe in 2-col df with one for date with fractional values (gcook p 370)
(cave I do not have time series object yet)
zoo package to convert to time series object ?? ]
# B What is mean total number of steps taken per day?
## 1 Make histogram of total number of steps per day
1. First, we create a new variable, called "stepsbyday", to store the total number of steps per day.
```{r}
stepsbyday<-tapply(act$steps, act$date, sum)
head(cbind(stepsbyday))
```
2. Then, we make the histogram of this new variable.
```{r,fig.width=7,fig.height=4}
max<-max(stepsbyday[is.na(stepsbyday)=="FALSE"])
max
hist(stepsbyday, col="red", main="Histogram of steps per day", ylab="Frequency", xlab="Number of steps per day", breaks=20, xlim=c(0,max+3000))
```
## 2 Calculate mean and median total number of steps per day
```{r}
meanbyday<-mean(stepsbyday,na.rm=T)
medianbyday<-median(stepsbyday, na.rm=T)
```
The mean total number per day is `r meanbyday` and the median total number per day is `r medianbyday`.
They are only 1 step per day different from each other, indicating hardly any skew in the data.
Note: For some reason the correct mean and median calculated by the 5-number summary differs very slightly from the command summary(stepsbyday). Summary() finds the maximum value at 21190 while the real maximum value is 21194.  (rounding effect?)
[Store MEAN total steps per day and make ts of this var]  ??? NOT NEEDED ???
# C What is the average daily activity pattern?
plot(act$date, act$steps, type="l")
## 1 Make time series plot with average number of steps per 5-min interval, averaged across all days
Do the same as above but with MEAN per 5-min interval
```{r}
stepsperinterval<-colSums(actwide[,-1],na.rm=T)
head(stepsperinterval)
tail(stepsperinterval)
```
First sum over all 61 days, then divide by 61 to get average.
```{r, fig.width=7, fig.height=4}
max(stepsperinterval)
max(stepsperinterval)/61
plot(stepsperinterval/61, type="l", main="Average number (across all days) of steps per 5-min interval", ylab="Number of steps", xlab="5-min intervals in a day", col="red")
```
## 2 Which 5-min interval, averaged across all days, contains most steps?
10927 steps in 5 min - to divide by 61 days? =179 steps per 5 min
```{r,results="hide"}
stepsperinterval<-as.data.frame(stepsperinterval)
stepsperinterval/61
```
```{r}
str(stepsperinterval/61)
```
There are 288 5-min intervals in a day
Look for interval with 179.13 steps
Answer: interval 835! (cumulative nr of 5-min intervals)
WRONG because we are looking at averages across days...
# D Imputing missing values
## 1 Calculate total number of rows with NAs
```{r NA}
rows<-nrow(act)
narows<-sum(is.na(act))
```
From the `r rows` in the dataset, `r narows` contain one or more missing values.
## 2 Devise strategy for filling missing values (e.g. mean for day, mean for 5-min interval, ...)
## 3 Create new dataset with missing data filled in.
## 4 Make histogram with total nr of steps per day. Calculate mean and median total steps per day. Do they differ from part B (without imputing missing values). What is impact of imputing missing data on the estimates?
# E Are there differences in activity patterns between weekdays and weekends?
## 1 Create factor 'part of week' (weekday or weekend)
## 2 Make panel plot of time series with average number of steps per 5-min interval, averaged across all weekdays OR weekenddays.
See gcook p354. ddply with transform
Then ggplot2 with gcook p370
Or zoo rcook
```{r}
library(zoo)
install.packages("zoo")
library("zoo", lib.loc="C:/Users/Robesyn/Documents/R/win-library/3.0")
detach("package:reshape2", unload=TRUE)
library("reshape2", lib.loc="C:/Users/Robesyn/Documents/R/win-library/3.0")
install.packages("zoo")
install.packages("zoo")
install.packages("zoo")
library("zoo", lib.loc="C:/Users/Robesyn/Documents/R/win-library/3.0")
datets<-zoo(act,act$date)
str(datets)
head(datets)
```
setwd("C:/Users/Robesyn/RepData_PeerAssessment1/activity")
dir()
act<-read.csv("activity.csv")
head(act)
tail(act)
class(act)
str(act)
str(act)
act$date<-as.Date(act$date)
act<-act[, c(2,3,1)]
head(act)
install.packages("reshape2")
library("reshape2", lib.loc="C:/Users/Robesyn/Documents/R/win-library/3.0")
actwide<-dcast(act, act$date~act$interval, value.var="steps")
str(actwide)
